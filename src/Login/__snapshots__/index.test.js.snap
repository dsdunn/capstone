// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login should match the snapShot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    history={
        Object {
            "goBack": [Function],
            "location": Object {
              "pathname": "/",
            },
            "push": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <a
          className="login-close-link"
          exact="true"
          onClick={[Function]}
>
          <img
                    className="close-btn"
                    src="close.svg"
          />
</a>,
        <h5>
          Login
</h5>,
        <label
          for="email"
>
          email
</label>,
        <input
          id="email"
          onChange={[Function]}
          value=""
/>,
        <label
          for="password"
>
          password
</label>,
        <input
          id="password"
          onChange={[Function]}
          type="password"
          value=""
/>,
        <button>
          Submit
</button>,
        <p
          className="login-err-message"
/>,
      ],
      "className": "login",
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <img
            className="close-btn"
            src="close.svg"
/>,
          "className": "login-close-link",
          "exact": "true",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "close-btn",
            "src": "close.svg",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        "type": "a",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Login",
        },
        "ref": null,
        "rendered": "Login",
        "type": "h5",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "email",
          "for": "email",
        },
        "ref": null,
        "rendered": "email",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "id": "email",
          "onChange": [Function],
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "password",
          "for": "password",
        },
        "ref": null,
        "rendered": "password",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "id": "password",
          "onChange": [Function],
          "type": "password",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Submit",
        },
        "ref": null,
        "rendered": "Submit",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "",
          "className": "login-err-message",
        },
        "ref": null,
        "rendered": "",
        "type": "p",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <a
            className="login-close-link"
            exact="true"
            onClick={[Function]}
>
            <img
                        className="close-btn"
                        src="close.svg"
            />
</a>,
          <h5>
            Login
</h5>,
          <label
            for="email"
>
            email
</label>,
          <input
            id="email"
            onChange={[Function]}
            value=""
/>,
          <label
            for="password"
>
            password
</label>,
          <input
            id="password"
            onChange={[Function]}
            type="password"
            value=""
/>,
          <button>
            Submit
</button>,
          <p
            className="login-err-message"
/>,
        ],
        "className": "login",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              className="close-btn"
              src="close.svg"
/>,
            "className": "login-close-link",
            "exact": "true",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "close-btn",
              "src": "close.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "a",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Login",
          },
          "ref": null,
          "rendered": "Login",
          "type": "h5",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "email",
            "for": "email",
          },
          "ref": null,
          "rendered": "email",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "id": "email",
            "onChange": [Function],
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "password",
            "for": "password",
          },
          "ref": null,
          "rendered": "password",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "id": "password",
            "onChange": [Function],
            "type": "password",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Submit",
          },
          "ref": null,
          "rendered": "Submit",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "",
            "className": "login-err-message",
          },
          "ref": null,
          "rendered": "",
          "type": "p",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
